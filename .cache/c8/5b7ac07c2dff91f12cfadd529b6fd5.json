{"id":"../node_modules/lit-html/lib/directive.js","dependencies":[{"name":"C:\\Users\\x004133\\projects\\ui-test\\node_modules\\lit-html\\lib\\directive.js.map","includedInParent":true,"mtime":1562100286993},{"name":"C:\\Users\\x004133\\projects\\ui-test\\package.json","includedInParent":true,"mtime":1562100573258},{"name":"C:\\Users\\x004133\\projects\\ui-test\\node_modules\\lit-html\\package.json","includedInParent":true,"mtime":1562100287245}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isDirective = exports.directive = void 0;\n\n/**\r\n * @license\r\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at\r\n * http://polymer.github.io/LICENSE.txt\r\n * The complete set of authors may be found at\r\n * http://polymer.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at\r\n * http://polymer.github.io/CONTRIBUTORS.txt\r\n * Code distributed by Google as part of the polymer project is also\r\n * subject to an additional IP rights grant found at\r\n * http://polymer.github.io/PATENTS.txt\r\n */\nconst directives = new WeakMap();\n/**\r\n * Brands a function as a directive factory function so that lit-html will call\r\n * the function during template rendering, rather than passing as a value.\r\n *\r\n * A _directive_ is a function that takes a Part as an argument. It has the\r\n * signature: `(part: Part) => void`.\r\n *\r\n * A directive _factory_ is a function that takes arguments for data and\r\n * configuration and returns a directive. Users of directive usually refer to\r\n * the directive factory as the directive. For example, \"The repeat directive\".\r\n *\r\n * Usually a template author will invoke a directive factory in their template\r\n * with relevant arguments, which will then return a directive function.\r\n *\r\n * Here's an example of using the `repeat()` directive factory that takes an\r\n * array and a function to render an item:\r\n *\r\n * ```js\r\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\r\n * ```\r\n *\r\n * When `repeat` is invoked, it returns a directive function that closes over\r\n * `items` and the template function. When the outer template is rendered, the\r\n * return directive function is called with the Part for the expression.\r\n * `repeat` then performs it's custom logic to render multiple items.\r\n *\r\n * @param f The directive factory function. Must be a function that returns a\r\n * function of the signature `(part: Part) => void`. The returned function will\r\n * be called with the part object.\r\n *\r\n * @example\r\n *\r\n * import {directive, html} from 'lit-html';\r\n *\r\n * const immutable = directive((v) => (part) => {\r\n *   if (part.value !== v) {\r\n *     part.setValue(v)\r\n *   }\r\n * });\r\n */\n\nconst directive = f => (...args) => {\n  const d = f(...args);\n  directives.set(d, true);\n  return d;\n};\n\nexports.directive = directive;\n\nconst isDirective = o => {\n  return typeof o === 'function' && directives.has(o);\n};\n\nexports.isDirective = isDirective;"},"sourceMaps":{"js":{"mappings":[{"source":"../src/lib/directive.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":21,"column":6},"generated":{"line":21,"column":6}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":21,"column":16},"generated":{"line":21,"column":16}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":21,"column":19},"generated":{"line":21,"column":19}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":21,"column":23},"generated":{"line":21,"column":23}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":21,"column":19},"generated":{"line":21,"column":30}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":21,"column":32}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":28,"column":0},"generated":{"line":22,"column":0}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":68,"column":7},"generated":{"line":63,"column":0}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":68,"column":13},"generated":{"line":63,"column":6}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":68,"column":22},"generated":{"line":63,"column":15}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":68,"column":54},"generated":{"line":63,"column":18}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":68,"column":25},"generated":{"line":63,"column":19}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":69,"column":5},"generated":{"line":63,"column":23}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":69,"column":6},"generated":{"line":63,"column":24}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":69,"column":9},"generated":{"line":63,"column":27}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":69,"column":5},"generated":{"line":63,"column":31}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":69,"column":28},"generated":{"line":63,"column":36}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":70,"column":6},"generated":{"line":64,"column":0}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":70,"column":12},"generated":{"line":64,"column":8}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":70,"column":13},"generated":{"line":64,"column":9}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":70,"column":16},"generated":{"line":64,"column":12}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":70,"column":17},"generated":{"line":64,"column":13}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":70,"column":18},"generated":{"line":64,"column":14}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":70,"column":21},"generated":{"line":64,"column":17}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":70,"column":17},"generated":{"line":64,"column":21}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":70,"column":6},"generated":{"line":64,"column":22}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":71,"column":6},"generated":{"line":65,"column":0}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":71,"column":6},"generated":{"line":65,"column":2}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":71,"column":16},"generated":{"line":65,"column":12}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":71,"column":17},"generated":{"line":65,"column":13}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":71,"column":6},"generated":{"line":65,"column":16}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":71,"column":21},"generated":{"line":65,"column":17}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":71,"column":6},"generated":{"line":65,"column":18}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":71,"column":24},"generated":{"line":65,"column":20}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":71,"column":6},"generated":{"line":65,"column":24}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":72,"column":6},"generated":{"line":66,"column":0}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":72,"column":13},"generated":{"line":66,"column":9}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":72,"column":6},"generated":{"line":66,"column":10}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":73,"column":5},"generated":{"line":67,"column":0}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":68,"column":7},"generated":{"line":67,"column":1}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":75,"column":7},"generated":{"line":71,"column":0}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":75,"column":13},"generated":{"line":71,"column":6}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":75,"column":24},"generated":{"line":71,"column":17}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":75,"column":28},"generated":{"line":71,"column":20}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":75,"column":27},"generated":{"line":71,"column":21}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":75,"column":60},"generated":{"line":71,"column":25}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":76,"column":2},"generated":{"line":72,"column":0}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":76,"column":9},"generated":{"line":72,"column":9}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":76,"column":16},"generated":{"line":72,"column":16}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":76,"column":9},"generated":{"line":72,"column":17}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":76,"column":22},"generated":{"line":72,"column":22}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":76,"column":9},"generated":{"line":72,"column":32}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":76,"column":36},"generated":{"line":72,"column":36}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":76,"column":46},"generated":{"line":72,"column":46}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":76,"column":47},"generated":{"line":72,"column":47}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":76,"column":36},"generated":{"line":72,"column":50}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":76,"column":51},"generated":{"line":72,"column":51}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":76,"column":36},"generated":{"line":72,"column":52}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":76,"column":2},"generated":{"line":72,"column":53}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":77,"column":1},"generated":{"line":73,"column":0}},{"source":"../src/lib/directive.ts","name":null,"original":{"line":75,"column":7},"generated":{"line":73,"column":1}}],"sources":{"../src/lib/directive.ts":"/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {Part} from './part.js';\n\nconst directives = new WeakMap<object, true>();\n\n// tslint:disable-next-line:no-any\nexport type DirectiveFactory = (...args: any[]) => object;\n\nexport type DirectiveFn = (part: Part) => void;\n\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = <F extends DirectiveFactory>(f: F): F =>\n    ((...args: unknown[]) => {\n      const d = f(...args);\n      directives.set(d, true);\n      return d;\n    }) as F;\n\nexport const isDirective = (o: unknown): o is DirectiveFn => {\n  return typeof o === 'function' && directives.has(o);\n};\n"},"lineCount":null}},"error":null,"hash":"f96da49e37d21067f30dce163ba074c0","cacheData":{"env":{}}}